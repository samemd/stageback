// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator zod {
  provider                  = "zod-prisma-types"
  useTypeAssertions         = true
  createRelationValuesTypes = false
  addIncludeType            = false
  addSelectType             = false
  validateWhereUniqueInput  = false
  writeNullishInModelTypes  = false
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Team {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  members     User[]       @relation("TeamMembers")
  songs       Song[]
  createdBy   User         @relation("Creator", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  activeUsers User[]       @relation("ActiveTeam")
  Invitation  Invitation[]

  @@index([name])
}

model User {
  id                  String       @id @default(cuid())
  name                String?
  email               String       @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  teams               Team[]       @relation("TeamMembers")
  createdTeams        Team[]       @relation("Creator")
  Song                Song[]
  Image               Image[]
  activeTeam          Team?        @relation("ActiveTeam", fields: [activeTeamId], references: [id])
  activeTeamId        String?
  invitationsSent     Invitation[] @relation("InvitedBy")
  invitationsRedeemed Invitation[] @relation("RedeemedBy")
}

model Invitation {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  team         Team     @relation(fields: [teamId], references: [id])
  teamId       String
  redeemedBy   User?    @relation("RedeemedBy", fields: [redeemedById], references: [id])
  redeemedById String?
  invitedBy    User     @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById  String
}

model Song {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  key          String       @unique
  fileName     String
  title        String
  artist       String
  url          String
  trackNo      Int?
  trackOf      Int?
  size         BigInt
  duration     Int
  lyrics       String?
  metadata     Json?
  artworkUrl   String?
  collections  Collection[]
  versionOfId  String?      @map("versionOf")
  versionOf    Song?        @relation("SongVersion", fields: [versionOfId], references: [id])
  versions     Song[]       @relation("SongVersion")
  team         Team         @relation(fields: [teamId], references: [id])
  teamId       String
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])
  uploadedById String
  album        Album?       @relation(fields: [albumId], references: [id])
  albumId      String?

  @@index([title])
}

model Album {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @unique
  artist     String?
  songs      Song[]
  artworkUrl String?
  year       Int?
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  songs     Song[]
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String   @unique
  name      String
  url       String
  size      BigInt

  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  uploadedById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
