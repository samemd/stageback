// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator zod {
  provider                  = "zod-prisma-types"
  useTypeAssertions         = true
  createRelationValuesTypes = true
  addIncludeType            = false
  addSelectType             = false
  // validateWhereUniqueInput  = true
  // writeNullishInModelTypes  = true
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Team {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  members     User[]   @relation("TeamMembers")
  songs       Song[]
  createdBy   User     @relation("Creator", fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         Team[]    @relation("TeamMembers")
  createdTeams  Team[]    @relation("Creator")
  Song          Song[]
  Image         Image[]
}

model Song {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String   @unique
  fileName  String
  title     String
  artist    String
  url       String
  trackNo   Int?
  trackOf   Int?
  size      BigInt
  duration  Int
  lyrics    String?
  metadata  Json?

  artwork      Image?       @relation(fields: [artworkId], references: [id])
  artworkId    BigInt?
  collections  Collection[]
  versionOfId  BigInt?      @map("versionOf")
  versionOf    Song?        @relation("SongVersion", fields: [versionOfId], references: [id])
  versions     Song[]       @relation("SongVersion")
  team         Team         @relation(fields: [teamId], references: [id])
  teamId       Int
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])
  uploadedById String
  album        Album?       @relation(fields: [albumId], references: [id])
  albumId      BigInt?

  @@index([title])
}

model Album {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  songs     Song[]
}

model Collection {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  songs     Song[]
}

model Image {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String   @unique
  name      String
  url       String
  size      BigInt

  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  uploadedById String
  Song         Song[]

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
